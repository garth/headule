// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma/client"
}

generator pothos {
  provider     = "prisma-pothos-types"
  clientOutput = "./prisma/client"
  output       = "../generated/pothos-types.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  action    String
  table     String
  recordId  Int      @map("record_id")
  data      Json
  userId    Int      @map("user_id")

  user User @relation(fields: [userId], references: [id])

  @@map("audit_log")
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  name         String
  customFields Json?    @map("custom_fields")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  bookings          Booking[]
  organisationUsers OrganisationUser[]
  auditLogs         AuditLog[]

  @@map("user")
}

enum Role {
  customer
  administrator

  @@map("role")
}

model OrganisationUser {
  id             Int      @id @default(autoincrement())
  organisationId Int      @map("organisation_id")
  userId         Int      @map("user_id")
  roles          Role     @default(customer)
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  organisation Organisation @relation(fields: [organisationId], references: [id])
  user         User         @relation(fields: [userId], references: [id])

  @@map("organisation_user")
}

model Organisation {
  id           Int      @id @default(autoincrement())
  name         String
  customFields Json?    @map("custom_fields")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  spaces            Space[]
  unavailables      Unavailable[]
  options           Option[]
  coupons           Coupon[]
  organisationUsers OrganisationUser[]

  @@map("organisation")
}

model Space {
  id             Int       @id @default(autoincrement())
  name           String
  organisationId Int       @map("organisation_id")
  customFields   Json?     @map("custom_fields")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
  deletedAt      DateTime? @map("deleted_at")

  organisation Organisation  @relation(fields: [organisationId], references: [id])
  slots        Slot[]
  unavailables Unavailable[]
  options      Option[]
  coupons      Coupon[]

  @@map("space")
}

model Slot {
  id           Int       @id @default(autoincrement())
  name         String
  startTime    Int       @map("start_time") // minute of the day that the slot starts
  length       Int // length, in minutes, of the slot
  daysOfWeek   Int[]     @map("days_of_week") // 0 = Sunday, 1 = Monday, 2 = Tuesday, 3 = Wednesday, 4 = Thursday, 5 = Friday, 6 = Saturday
  daysOfMonth  Int[]     @map("days_of_month") // 1 = 1st of the month, 2 = 2nd of the month, -1 = last day of the month, etc...
  spaceId      Int       @map("space_id")
  blockLength  Int       @default(30) @map("block_length") // bookings must be made in multiples of blockLength minutes
  blockPrice   Int       @default(0) @map("block_price") // price of a single block
  customFields Json?     @map("custom_fields")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  deletedAt    DateTime? @map("deleted_at")

  space        Space         @relation(fields: [spaceId], references: [id])
  bookingSlots BookingSlot[]
  options      Option[]
  coupons      Coupon[]

  @@map("slot")
}

model Unavailable {
  id             Int      @id @default(autoincrement())
  reason         String
  organisationId Int      @map("organisation_id")
  spaceId        Int?     @map("space_id") // if set, the unavailability is only applied the specified space
  startTime      DateTime @map("start_time")
  endTime        DateTime @map("end_time")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  organisation Organisation @relation(fields: [organisationId], references: [id])
  space        Space?       @relation(fields: [spaceId], references: [id])

  @@map("unavailable")
}

model Option {
  id             Int       @id @default(autoincrement())
  name           String
  unitPrice      Int       @map("unit_price")
  maxUnits       Int       @default(1) @map("max_units") // the maximum number of units that can be added to a booking
  organisationId Int       @map("organisation_id")
  spaceId        Int?      @map("space_id") // if set, the option is only available for the specified space
  slotId         Int?      @map("slot_id") // if set, the option is only available for the specified slot
  customFields   Json?     @map("custom_fields")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
  deletedAt      DateTime? @map("deleted_at")

  organisation   Organisation    @relation(fields: [organisationId], references: [id])
  space          Space?          @relation(fields: [spaceId], references: [id])
  slot           Slot?           @relation(fields: [slotId], references: [id])
  bookingOptions BookingOption[]

  @@map("option")
}

model BookingSlot {
  bookingId         Int      @map("booking_id")
  slotId            Int      @map("slot_id")
  startTime         DateTime @map("start_time")
  length            Int // length, in minutes, of the booking
  slotBlockPrice    Int      @map("block_price") // copy of the slot block price at the time of booking, in case the slot block price changes
  slotBlockQuantity Int      @map("block_quantity") // calulated from the booking time span and the slot block length - makes it easier to calculate the booking price
  slotSnapshot      Json     @map("slot_snapshot") // copy of the slot at the time of booking, in case the slot changes
  customFields      Json?    @map("custom_fields")

  booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  slot    Slot    @relation(fields: [slotId], references: [id])

  @@id([bookingId, slotId])
  @@map("booking_slot")
}

model BookingOption {
  bookingId      Int   @map("booking_id")
  optionId       Int   @map("option_id")
  quantity       Int   @default(1)
  unitPrice      Int   @map("unit_price") // copied from the option at the time of booking, in case the option price changes
  optionSnapshot Json  @map("option_snapshot") // copied from the option at the time of booking, in case the option changes
  customFields   Json? @map("custom_fields")

  booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  option  Option  @relation(fields: [optionId], references: [id])

  @@id([bookingId, optionId])
  @@map("booking_option")
}

model Booking {
  id                       Int      @id @default(autoincrement())
  userId                   Int      @map("user_id")
  couponId                 Int?     @map("coupon_id")
  couponDiscountPercentage Int?     @map("discount_percentage") // if a coupon is used, copied from the coupon when the booking is created, in case the coupon discount changes
  couponDiscountValue      Int?     @map("discount_value") // if a coupon is used, copied from the coupon when the booking is created, in case the coupon discount changes
  couponSnapshot           Json?    @map("coupon_snapshot") // if a coupon is used, copied from the coupon when the booking is created, in case the coupon changes
  customFields             Json?    @map("custom_fields")
  createdAt                DateTime @default(now()) @map("created_at")
  updatedAt                DateTime @updatedAt @map("updated_at")

  user           User            @relation(fields: [userId], references: [id])
  coupon         Coupon?         @relation(fields: [couponId], references: [id])
  bookingSlots   BookingSlot[]
  bookingOptions BookingOption[]

  @@map("booking")
}

model Coupon {
  id                 Int       @id @default(autoincrement())
  code               String //  coupun codes, not marked as deleted, must be unique to the organisation
  discountPercentage Int?      @map("discount_percentage") // either discountPercentage or discountValue must have a value, but not both
  discountValue      Int?      @map("discount_value") // either discountPercentage or discountValue must have a value, but not both
  quantity           Int? // if set, the number of coupons will be limited
  validFrom          DateTime? @map("valid_from") // if set, coupons cannot be used for bookings that finish before this date
  validTo            DateTime? @map("valid_to") // if set, coupons cannot be used for bookings that start after this date
  expiresAt          DateTime? @map("expires_at") // if set, the coupon cannot be used after this date
  organisationId     Int       @map("organisation_id")
  spaceId            Int?      @map("space_id") // if set, the coupon can only be used for bookings in the specified space
  slotId             Int?      @map("slot_id") // if set, the coupon can only be used for bookings in the specified slot
  customFields       Json?     @map("custom_fields")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")
  deletedAt          DateTime? @map("deleted_at")

  organisation Organisation @relation(fields: [organisationId], references: [id])
  space        Space?       @relation(fields: [spaceId], references: [id])
  slot         Slot?        @relation(fields: [slotId], references: [id])
  bookings     Booking[]

  @@unique([code, organisationId, deletedAt])
  @@map("coupon")
}
